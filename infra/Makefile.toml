[config]
default_to_workspace = false

[env]
CHAIN_NAME = { value = "root", condition = { env_not_set = ["CHAIN_NAME"] }}
BALANCE = { value = "1000", condition = { env_not_set = ["BALANCE"] }}
BASE_FEE = { value = "1000", condition = { env_not_set = ["BASE_FEE"] }}
TIMESTAMP = { value = "1680101412", condition = { env_not_set = ["TIMESTAMP"] }}

BASE_DIR="${HOME}/.ipc/${CHAIN_NAME}"

BASE_TESTNET_DIR="${HOME}/.ipc-testnet"

FM_DIR="${BASE_DIR}/fendermint"
CMT_DIR="${BASE_DIR}/cometbft"

GENESIS_FILE="${FM_DIR}/genesis.json"
KEYS_DIR="${FM_DIR}/keys"
KEY_NAME="validator_key"
PUB_KEY_PATH="${KEYS_DIR}/${KEY_NAME}.pk"
PRIV_KEY_PATH="${KEYS_DIR}/${KEY_NAME}.sk"

NETWORK_NAME = "${CHAIN_NAME}"


CMT_CONTAINER_NAME = "${NETWORK_NAME}-cometbft"
FM_CONTAINER_NAME = "${NETWORK_NAME}-fendermint"
ETHAPI_CONTAINER_NAME = "${NETWORK_NAME}-ethapi"

CMT_DOCKER_IMAGE = "cometbft/cometbft:v0.37.x"
FM_DOCKER_IMAGE = "fendermint:latest"
TEST_DATA_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/fendermint/testing/smoke-test/test-data"
TEST_SCRIPTS_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/fendermint/testing/smoke-test/scripts"
ACTORS_BUNDLE = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/../builtin-actors/output/bundle.car"
CMT_HOST_PORT = 26657
ETHAPI_HOST_PORT = 8545
# If this wasn't present, any wait task is skipped.
CARGO_MAKE_WAIT_MILLISECONDS = 5000
# This wait time seems to work locally.
CMT_WAIT_MILLIS = 10000
# Keep example logs to a minimum.
VERBOSITY = ""

[env.ci]
CMT_WAIT_MILLIS = 20000
# Help debug any issues with simplecoin by logging requests and responses.
VERBOSITY = "--verbose"

# infrastructure workflows:
# cargo install cargo-make
#
# cd fendermint/testing/smoke-test
# - then -
# cargo make --profile ci
# - or -
# cargo make setup
# cargo make test
# docker logs smoke-ethapi
# cargo make teardown

[tasks.info]
script="""
echo
echo Chain info:
echo - Chain: ${CHAIN_NAME}
echo - Balance: ${BALANCE}
echo - Base Fee: ${BASE_FEE}
echo - Timestamp: ${TIMESTAMP}
echo
echo Single node testnet layout:
echo - IPC directory: ${BASE_DIR}
echo - IPC Testnet directory: ${BASE_TESTNET_DIR}
echo - CometBFT directory: ${CMT_DIR}
echo - Fendermint directory: ${FM_DIR}
echo - Keys directory: ${KEYS_DIR}
echo - Genesis file: ${GENESIS_FILE}
echo - Private key: ${PRIV_KEY_PATH}
echo - Network: ${NETWORK_NAME}
echo - CometBFT container: ${CMT_CONTAINER_NAME}
echo - Fendermint container: ${FM_CONTAINER_NAME}
echo
echo
echo 4 nodes testnet layout:
echo - IPC directory: ${BASE_TESTNET_DIR}
echo - Genesis file: ${GENESIS_FILE}
echo - Network: ${NETWORK_NAME}
echo
"""

[tasks.default]
clear = true
script_runner = "@duckscript"
script = ['''
    echo
    echo Main tasks:
    echo - clear: Clear all information: private keys, cache, database, etc.
    echo - init: Initialize the system
    echo - info: Print the setup information
    echo - start: Start Fendermint/CometBFT docker containers with the genesis
    echo - teardown: Stop the system and clears all data
    echo - run: Init and then start the system
    echo
    echo Most tasks use these environment variables:
    echo - CHAIN_NAME (default '${CHAIN_NAME}'): the target IPC subnet
    echo
    echo Run 'cargo make -e CHAIN_NAME=chain -e BALANCE=100 -e BASE_FEE=200 ... COMMAND' to populate the variables from CLI or
    echo Run 'cargo make --env-file=/PATH/.env COMMAND' to populate the variables from the file before running the command.
    echo
    echo Run 'cargo make --list-all-steps' for a complete list of available tasks.
    echo
''']

########################################################################################################################
# Single node
########################################################################################################################
[tasks.node]
workspace = false
dependencies = [
  "node-down",
  "node-init",
  "node-network-create",
  "cometbft-init",
  "fendermint-deps",
  "node-config",
  "fendermint-start",
  "cometbft-start",
  "cometbft-wait",
  "ethapi-start"
]

[tasks.node-network-create]
env = { "NETWORK_NAME"="${NETWORK_NAME}"}
extend = "network-create"


[tasks.node-init]
dependencies = [
  "node-clear",
  "node-mkdir",
]

[tasks.node-clear]
script="""
echo clearing all IPC data
rm -rf ${BASE_DIR}
"""

[tasks.node-mkdir]
script="""
echo creating directories: $BASE_DIR $FM_DIR $CMT_DIR
mkdir -p $BASE_DIR
mkdir -p $FM_DIR

mkdir -p $CMT_DIR
"""

[tasks.node-down]
# `dependencies` doesn't seem to work with `cleanup_task`.
run_task = { name = [
  "cometbft-stop",
  "cometbft-rm",
  "fendermint-stop",
  "fendermint-rm",
  "ethapi-stop",
  "ethapi-rm",
  "network-rm"
]}

# This task create all necessary data structures to run Fendermint:
# the genesis file with necessary entities and cryptographic keys.
[tasks.node-config]
dependencies = [
  "fendermint-new-genesis",
  "fendermint-new-key",
  "fendermint-new-account",
  "fendermint-add-validator",
  "fendermint-new-gateway",
  "fendermint-export-keys"
]

[tasks.fendermint-new-genesis]
cwd = "./target/release"
script = """
./fendermint genesis --genesis-file ${GENESIS_FILE} new --chain-name ${CHAIN_NAME} --base-fee ${BASE_FEE} --timestamp ${TIMESTAMP}
"""

[tasks.fendermint-new-key]
cwd = "./target/release"
script="""
mkdir -p $KEYS_DIR

./fendermint key gen --out-dir $KEYS_DIR --name $KEY_NAME;
chmod 600 ${PRIV_KEY_PATH}
"""

[tasks.fendermint-new-account]
cwd = "./target/release"
script="""
./fendermint genesis --genesis-file ${GENESIS_FILE} add-account --public-key ${PUB_KEY_PATH} --balance ${BALANCE}
"""


[tasks.fendermint-add-validator]
cwd = "./target/release"
script = """
./fendermint genesis --genesis-file ${GENESIS_FILE} add-validator --public-key ${PUB_KEY_PATH} --power 1
"""

[tasks.fendermint-new-gateway]
cwd = "./target/release"
script = """
./fendermint genesis --genesis-file ${GENESIS_FILE} ipc gateway --subnet-id /r0 \
    --top-down-check-period 10 \
    --bottom-up-check-period 10 \
    --msg-fee 10 \
    --majority-percentage 66
"""

[tasks.fendermint-export-keys]
cwd = "./target/release"
script = """
./fendermint genesis --genesis-file ${GENESIS_FILE} into-tendermint --out ${CMT_DIR}/config/genesis.json

./fendermint key into-tendermint --secret-key ${PRIV_KEY_PATH} --out ${CMT_DIR}/config/priv_validator_key.json
chmod 600 ${CMT_DIR}/config/priv_validator_key.json
"""

[tasks.fendermint-start]
extend = "fendermint-run"
env = { "ENTRY" = "fendermint", "CMD" = "run", "FLAGS" = "-d" }

[tasks.fendermint-run]
script = """
docker run \
  ${FLAGS} \
  --name ${FM_CONTAINER_NAME} \
  --init \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --volume ${BASE_DIR}:/data \
  --env FM_DATA_DIR=/data/fendermint/data \
  --env FM_CHAIN_NAME=${NETWORK_NAME} \
  --env LOG_LEVEL=info \
  --entrypoint ${ENTRY} \
  ${FM_DOCKER_IMAGE} \
  ${CMD}
"""
dependencies = ["network-create", "fendermint-deps"]

########################################################################################################################
# Testnet node
########################################################################################################################

[tasks.testnet]
dependencies = [
  "testnet-down",
  "testnet-init",
  "fendermint-deps",
  "testnet-fendermint-config",
  "testnet-up"
]

[tasks.testnet-up]
script = """
if [ -z $GID ]; then export GID=$(id -g); fi
if [ -z $UID ]; then export UID=$(id -u); fi
export CMT_PERSISTENT_PEERS=`cat $BASE_TESTNET_DIR/peers`
export CHAIN_NAME=$CHAIN_NAME
export BASE_TESTNET_DIR=$BASE_TESTNET_DIR
docker compose -f ./infra/docker-compose.yml up -d
"""

[tasks.testnet-down]
dependencies = [
  "testnet-docker-compose-down",
  "network-rm",
]

[tasks.testnet-docker-compose-down]
script = """
export CMT_PERSISTENT_PEERS="UNDEFINED"
docker compose -f ./infra/docker-compose.yml down
"""

[tasks.testnet-init]
dependencies = [
  "testnet-clear",
  "testnet-network-create",
  "cometbft-pull",
  "testnet-mkdir",
  "testnet-cometbft-init",
  "testnet-mkdir",
]

[tasks.testnet-network-create]
env = { "NETWORK_NAME"="${NETWORK_NAME}"}
extend = "network-create"

[tasks.testnet-clear]
script="""
echo clearing all IPC data
rm -rf ${BASE_TESTNET_DIR}
"""

[tasks.testnet-mkdir]
script="""
mkdir -p $BASE_TESTNET_DIR
mkdir -p $BASE_TESTNET_DIR/out

for i in $(seq 0 3); do
    mkdir -p $BASE_TESTNET_DIR/node${i}
    mkdir -p $BASE_TESTNET_DIR/node${i}/fendermint
    mkdir -p $BASE_TESTNET_DIR/node${i}/cometbft
done
"""

[tasks.testnet-cometbft-init]
dependencies = ["testnet-cometbft-init-node0", "testnet-cometbft-init-node1", "testnet-cometbft-init-node2", "testnet-cometbft-init-node3"]

[tasks.testnet-cometbft-init-node0]
extend = "cometbft-init"
env = { "CMD" = "init", "NETWORK_NAME"="${NETWORK_NAME}", "CMT_DIR" = "${BASE_TESTNET_DIR}/node0/cometbft", "CMT_CONTAINER_NAME" = "cometbft-node0", "FLAGS" = "-a STDOUT -a STDERR --rm"}

[tasks.testnet-cometbft-init-node1]
extend = "cometbft-init"
env = { "CMD" = "init", "NETWORK_NAME"="${NETWORK_NAME}", "CMT_DIR" = "${BASE_TESTNET_DIR}/node1/cometbft", "CMT_CONTAINER_NAME" = "cometbft-node1", "FLAGS" = "-a STDOUT -a STDERR --rm"  }

[tasks.testnet-cometbft-init-node2]
extend = "cometbft-init"
env = { "CMD" = "init", "NETWORK_NAME"="${NETWORK_NAME}", "CMT_DIR" = "${BASE_TESTNET_DIR}/node2/cometbft", "CMT_CONTAINER_NAME" = "cometbft-node2", "FLAGS" = "-a STDOUT -a STDERR --rm"  }

[tasks.testnet-cometbft-init-node3]
extend = "cometbft-init"
env = { "CMD" = "init", "NETWORK_NAME"="${NETWORK_NAME}", "CMT_DIR" = "${BASE_TESTNET_DIR}/node3/cometbft", "CMT_CONTAINER_NAME" = "cometbft-node3", "FLAGS" = "-a STDOUT -a STDERR --rm"  }

[tasks.testnet-fendermint-config]
dependencies = [
  "testnet-config-newgenesis",
  "testnet-config-peers",
  "testnet-config-newkey",
  "testnet-config-newaccount",
  "testnet-config-newgateway",
  "testnet-share-genesis"
]

[tasks.testnet-config-newgenesis]
cwd = "./target/release"
script = """
./fendermint genesis --genesis-file $BASE_TESTNET_DIR/genesis.json \
      new --chain-name ${CHAIN_NAME} --base-fee ${BASE_FEE} --timestamp ${TIMESTAMP}

cat $BASE_TESTNET_DIR/genesis.json
"""

[tasks.testnet-config-newkey]
cwd = "./target/release"
script="""
for i in $(seq 0 3); do
    mkdir -p $BASE_TESTNET_DIR/node${i}/fendermint/keys
    ./fendermint key gen --out-dir $BASE_TESTNET_DIR/node${i}/fendermint/keys --name validator${i}_key
done
"""

[tasks.testnet-config-newaccount]
cwd = "./target/release"
script="""
for i in $(seq 0 3); do
./fendermint genesis --genesis-file $BASE_TESTNET_DIR/genesis.json add-account \
        --public-key $BASE_TESTNET_DIR/node${i}/fendermint/keys/validator${i}_key.pk --balance ${BALANCE}
done
"""

[tasks.testnet-config-peers]
cwd = "./target/release"
script="""
for i in $(seq 0 3); do
    ./fendermint key add-peer \
        --node-key-file $BASE_TESTNET_DIR/node${i}/cometbft/config/node_key.json \
        --network-addr 192.167.10.$((${i}+2)):26656 \
        --local-peers-file $BASE_TESTNET_DIR/peers
done

unset CMT_PERSISTENT_PEERS
export CMT_PERSISTENT_PEERS=`cat $BASE_TESTNET_DIR/peers`
echo Persistent peers: $CMT_PERSISTENT_PEERS

for i in $(seq 0 3); do
    sed -i'bak' "s/persistent_peers = \\"\\"/persistent_peers = \\"$CMT_PERSISTENT_PEERS\\"/" $BASE_TESTNET_DIR/node${i}/cometbft/config/config.toml
done
"""

[tasks.testnet-config-newgateway]
cwd = "./target/release"
script = """
for i in $(seq 0 3); do
    ./fendermint genesis \
        --genesis-file $BASE_TESTNET_DIR/genesis.json add-validator \
        --public-key $BASE_TESTNET_DIR/node${i}/fendermint/keys/validator${i}_key.pk \
        --power 1
done

./fendermint genesis --genesis-file $BASE_TESTNET_DIR/genesis.json ipc gateway --subnet-id /r0 \
    --top-down-check-period 10 \
    --bottom-up-check-period 10 \
    --msg-fee 10 \
    --majority-percentage 66

./fendermint genesis \
    --genesis-file $BASE_TESTNET_DIR/genesis.json into-tendermint \
    --out $BASE_TESTNET_DIR/out/genesis.json

for i in $(seq 0 3); do
    ./fendermint key into-tendermint \
        --secret-key $BASE_TESTNET_DIR/node${i}/fendermint/keys/validator${i}_key.sk \
        --out $BASE_TESTNET_DIR/node${i}/cometbft/config/priv_validator_key.json
done

echo "GENESIS:"
cat $BASE_TESTNET_DIR/genesis.json
"""

[tasks.testnet-share-genesis]
cwd = "./target/release"
script = """
for i in $(seq 0 3); do
    cp $BASE_TESTNET_DIR/out/genesis.json $BASE_TESTNET_DIR/node${i}/cometbft/config/genesis.json
done
"""

########################################################################################################################
# Apps
########################################################################################################################

[tasks.simplecoin-example]
# Using --release in the hope that it can reuse artifacts compiled earlier for the docker build.
script = """
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
cargo run -p fendermint_rpc --release --example simplecoin -- \
  --secret-key fendermint/testing/smoke-test/test-data/fendermint/keys/alice.sk \
  ${VERBOSITY}
"""

[tasks.ethapi-example]
script = """
cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
cargo run -p fendermint_eth_api --release --example ethers -- \
  --secret-key-from fendermint/testing/smoke-test/test-data/fendermint/keys/emily.sk \
  --secret-key-to   fendermint/testing/smoke-test/test-data/fendermint/keys/eric.sk
"""

########################################################################################################################
# Primitives
########################################################################################################################

[tasks.cometbft-pull]
command = "docker"
args = ["pull", "${CMT_DOCKER_IMAGE}"]

[tasks.cometbft-init]
extend = "cometbft-run"
env = { "CMD" = "init", "FLAGS" = "-a STDOUT -a STDERR --rm" }

[tasks.cometbft-start]
extend = "cometbft-run"
env = { "CMD" = "start", "FLAGS" = "-d" }

[tasks.cometbft-wait]
extend = "wait"
env = { "CARGO_MAKE_WAIT_MILLISECONDS" = "${CMT_WAIT_MILLIS}" }

[tasks.cometbft-run]
script = """
docker run \
  ${FLAGS} \
  --name ${CMT_CONTAINER_NAME} \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --publish 26657:${CMT_HOST_PORT} \
  --volume ${CMT_DIR}:/cometbft \
  --env CMT_PROXY_APP=tcp://${FM_CONTAINER_NAME}:26658 \
  --env CMT_PEX=false \
  ${CMT_DOCKER_IMAGE} \
  ${CMD}
"""
dependencies = ["cometbft-pull", "network-create"]

[tasks.cometbft-rm]
extend = "docker-rm"
env = { "CONTAINER_NAME" = "${CMT_CONTAINER_NAME}" }

[tasks.cometbft-stop]
extend = "docker-stop"
env = { "CONTAINER_NAME" = "${CMT_CONTAINER_NAME}" }

[tasks.cometbft-logs]
extend = "docker-logs"
env = { "CONTAINER_NAME" = "${CMT_CONTAINER_NAME}" }

[tasks.fendermint-deps]
script = """
# Check if the image exists
# TODO: Check the version or use a flag to always re-build?
if docker images | awk '{print $1":"$2}' | grep fendermint; then
    echo fendermint image already exists
    docker images | grep fendermint
else
    cd ${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}
    make docker-build
fi
"""

[tasks.ethapi-start]
extend = "ethapi-run"
env = { "CMD" = "eth run", "FLAGS" = "-d" }


[tasks.ethapi-run]
script = """
docker run \
  ${FLAGS} \
  --name ${ETHAPI_CONTAINER_NAME} \
  --init \
  --user $(id -u) \
  --network ${NETWORK_NAME} \
  --publish 8545:${ETHAPI_HOST_PORT} \
  --env TENDERMINT_WS_URL=ws://${CMT_CONTAINER_NAME}:26657/websocket \
  --env LOG_LEVEL=debug \
  --env RUST_BACKTRACE=1 \
  ${FM_DOCKER_IMAGE} \
  ${CMD}
"""
dependencies = ["network-create"]

[tasks.network-create]
command = "docker"
args = ["network", "create", "${NETWORK_NAME}"]
ignore_errors = true

[tasks.network-rm]
command = "docker"
args = ["network", "rm", "${NETWORK_NAME}"]
ignore_errors = true

[tasks.fendermint-rm]
extend = "docker-rm"
env = { "CONTAINER_NAME" = "${FM_CONTAINER_NAME}" }

[tasks.fendermint-stop]
extend = "docker-stop"
env = { "CONTAINER_NAME" = "${FM_CONTAINER_NAME}" }

[tasks.ethapi-rm]
extend = "docker-rm"
env = { "CONTAINER_NAME" = "${ETHAPI_CONTAINER_NAME}" }

[tasks.ethapi-stop]
extend = "docker-stop"
env = { "CONTAINER_NAME" = "${ETHAPI_CONTAINER_NAME}" }

[tasks.ethapi-logs]
extend = "docker-logs"
env = { "CONTAINER_NAME" = "${ETHAPI_CONTAINER_NAME}" }

[tasks.fendermint-logs]
extend = "docker-logs"
env = { "CONTAINER_NAME" = "${FM_CONTAINER_NAME}" }

[tasks.docker-stop]
command = "docker"
args = ["stop", "${CONTAINER_NAME}"]
ignore_errors = true

[tasks.docker-rm]
command = "docker"
args = ["rm", "--force", "${CONTAINER_NAME}"]
ignore_errors = true

[tasks.docker-logs]
command = "docker"
args = ["logs", "${CONTAINER_NAME}"]
ignore_errors = true
