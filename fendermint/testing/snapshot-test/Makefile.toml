# cd fendermint/testing/snapshot-test
# - then -
# cargo make
# - or -
# cargo make setup
# cargo make test
# docker logs snapshot-fendermint
# cargo make teardown

extend = [
  { path = "../Makefile/common.toml" },
]

env_files = [
  # `snapshot.env` is the environment for `cargo make`.
  { path = "./scripts/snapshot.env" },
  { path = "../Makefile/common.env" },
  { path = "../Makefile/ci.env", profile = "ci" },
]

# Overriding the env file to enable snapshotting.
# This one is applied on every *container*.
# The other env files are for `cargo make` itself,
# the values are only available inside TOML files.
[tasks.test-data-env]
script = """
cat << EOF > ${TEST_DATA_DIR}/.env
FM_DB__HIST_SIZE=100
FM_SNAPSHOTS__ENABLED=true
FM_SNAPSHOTS__BLOCK_INTERVAL=10
FM_SNAPSHOTS__HIST_SIZE=10
FM_SNAPSHOTS__CHUNK_SIZE_BYTES=1048576
FM_SNAPSHOTS__SYNC_POLL_INTERVAL=10
CMT_PEX=true
CMT_MAX_NUM_OUTBOUND_PEERS=2
EOF
"""

# This is the test workflow
[tasks.test]
clear = true
run_task = { name = [
  "snapshot-wait",
  "snapshot-created",
  "node-1-setup",
  "node-1-sync-test",
  "node-2-setup",
  "node-2-sync-test",
], fork = true, cleanup_task = "snapshot-teardown" }

# Wait enough time that some snapshots should be exported.
[tasks.snapshot-wait]
extend = "wait"
env = { "CARGO_MAKE_WAIT_MILLISECONDS" = "15000" }

# Check that some snapshots are being produced.
[tasks.snapshot-created]
script = """
FM_SNAPSHOTS_DIR=${TEST_DATA_DIR}/${NODE_NAME}/fendermint/snapshots
if [ -z "$(ls -A $FM_SNAPSOTS_DIR)" ]; then
   echo "ERROR: No snapshots created at $FM_SNAPSHOTS_DIR"
   exit 1
fi
"""

# Shut down all non-default nodes.
[tasks.snapshot-teardown]
run_task = { name = [
  "node-1-teardown",
  "node-2-teardown",
] }


# ### General tasks for node-1 and node-2

# Set the persistent peer address to that of the default node-0.
[tasks.node-set-seed]
script = """
CMT_SEED_ID=$(cat $BASE_DIR/$SEED_NODE_NAME/node-id)
CMT_PERSISTENT_PEERS=$CMT_SEED_ID@$SEED_CMT_CONTAINER_NAME:26656
sed -i'' -e "s|persistent_peers = \\"\\"|persistent_peers = \\"$CMT_PERSISTENT_PEERS\\"|" $BASE_DIR/${NODE_NAME}/cometbft/config/config.toml
"""

# Get the genesis from node-0
[tasks.node-copy-genesis]
script = """
cp $BASE_DIR/${SEED_NODE_NAME}/cometbft/config/genesis.json \
   $BASE_DIR/${NODE_NAME}/cometbft/config/genesis.json
"""

[tasks.node-setup]
# Export node-0 ID.
dependencies = ["cometbft-export-node-id"]
run_task = { name = [
  "test-node-dir",
  "cometbft-init",
  "node-set-seed",
  "node-copy-genesis",
  "fendermint-start",
  "cometbft-start",
  "cometbft-wait",
  "fendermint-logs",
  "cometbft-logs",
] }

[tasks.node-teardown]
run_task = { name = [
  "cometbft-destroy",
  "fendermint-destroy",
  "test-node-dir-rm",
] }

# See if it managed to sync.
[tasks.node-sync-test]
script = """
EARLIEST=$(curl -s localhost:${CMT_RPC_HOST_PORT}/status | jq -r ".result.sync_info.earliest_block_height")
LATEST=$(curl -s localhost:${CMT_RPC_HOST_PORT}/status | jq -r ".result.sync_info.latest_block_height")

if [ "$EARLIEST" = "$LATEST" ]; then
  echo "ERROR: The chain is not syncing!"
  exit 1
fi
"""

# ### node-1 tasks

[tasks.node-1-setup]
env_files = [{ path = "./scripts/node-1.env" }]
extend = "node-setup"

[tasks.node-1-teardown]
env_files = [{ path = "./scripts/node-1.env" }]
extend = "node-teardown"

[tasks.node-1-sync-test]
env_files = [{ path = "./scripts/node-1.env" }]
extend = "node-sync-test"

# ### node-2 tasks

# TODO: Get a trusted height and block hash from node-0, something that has a snapshot.
# TODO: Configure node-2 to use the RPC addresses of node-0 and node-1 for state sync.
# TODO: Make sure when node-2 starts it's unable to sync from genesis.
[tasks.node-2-setup]
env_files = [{ path = "./scripts/node-2.env" }]
extend = "node-setup"

[tasks.node-2-teardown]
env_files = [{ path = "./scripts/node-2.env" }]
extend = "node-teardown"

[tasks.node-2-sync-test]
env_files = [{ path = "./scripts/node-2.env" }]
extend = "node-sync-test"
