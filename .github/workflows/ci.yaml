name: Continuous integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '**'

jobs:
  # Check code formatting; anything that doesn't require compilation.
  pre-compile-checks:
    name: Pre-compile checks
    runs-on: ubuntu-latest
    steps:
      - name: Check out the project
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
      - name: Check code formatting
        run: make check-fmt
      - name: Check license headers
        run: make license

  # Test matrix, running tasks from the Makefile.
  tests:
    needs: [pre-compile-checks]
    name: ${{ matrix.make.name }} (${{ matrix.os }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: [stable, nightly]
        make:
          - name: Lint
            task: lint
          - name: Test
            task: test
        exclude:
          - rust: nightly
            make:
              name: Lint

    env:
      RUST_BACKTRACE: full
      RUSTFLAGS: -Dwarnings
      CARGO_INCREMENTAL: '0'
      SCCACHE_CACHE_SIZE: 2G

    steps:
      - name: Check out the project
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Setup sccache
        uses: hanabi1224/sccache-action@v1.2.0 # https://github.com/hanabi1224/sccache-action used by Forest.
        timeout-minutes: 5
        continue-on-error: true
        with:
          release-name: v0.3.1
          cache-key: cargo-${{ matrix.os }}-${{matrix.rust}}-${{ hashFiles('**/Cargo.lock', 'rust-toolchain', 'rust-toolchain.toml') }}
          cache-update: false # It contains the lock file, should be immutable.

      - name: ${{ matrix.make.name }}
        run: make ${{ matrix.make.task }}
